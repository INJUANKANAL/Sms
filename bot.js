const Telegraf = require('telegraf')
const Extra = require('telegraf/extra')
const Markup = require('telegraf/markup')
const services = require('./services.json')
const countries = require('./countries.json')
const Config = require('./config');
const config = new Config();
const bot = new Telegraf(config.get('telegram', 'token'));
const Database = require('./database');
const refill = require('./refill');
const API = require('./api')
const RedisSession = require('telegraf-session-redis')
const callbackQiwi = require('./minqiwi');

bot.use(Telegraf.log())
bot.use(async (ctx, next) => {
    if (ctx.chat && ctx.chat.id) {
    if (typeof ctx.chat.username === 'undefined') {
        ctx.reply('‚ùå –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –Ω–∏–∫–Ω–µ–π–º –≤ —Ç–µ–ª–µ–≥–µ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞');
        return;
    }
    ctx.user = await Database.updateUsername(ctx.chat.id, typeof ctx.chat.username != 'undefined' ? ctx.chat.username.replace(/@/g, "") : '');
    next();
}
});
const token = config.get('qiwi', 'token');
const wally = config.get('qiwi', 'wallet');
const wallet = new callbackQiwi(token);

const session = new RedisSession({
    store: {
      host: process.env.TELEGRAM_SESSION_HOST || '127.0.0.1',
      port: process.env.TELEGRAM_SESSION_PORT || 6379
    }
  })
  
bot.use(session)


async function startCommand(ctx) {
    let kb = ['üç≠ –ö—É–ø–∏—Ç—å', 'üßúüèª –ü—Ä–æ—Ñ–∏–ª—å'];
    let admKeyboard = [
        ...kb, 'üëë –ê–¥–º–∏–Ω–∫–∞'
    ];
    await ctx.replyWithSticker('CAACAgIAAxkBAAEHh8Zf8JKs_mlfasRPBA6bwzEZZfD4ggACDgADDkfHKNYTYJGwbH6ZHgQ')
    ctx.reply('üí´ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, –¥–µ—Ä–∂–∏ –º–µ–Ω—é—à–∫—É', Markup
    .keyboard([ctx.user.admin == 1 ? admKeyboard : kb])
    .resize()
    .extra()
  )
}

bot.command('start', startCommand);
bot.hears('üîô –ù–∞–∑–∞–¥', startCommand);

bot.action('cancel_change_wallet', async (ctx) => {
    if (!ctx.user.admin) return;
    ctx.session.changeWallet = false;
    ctx.reply(`‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—Ç–º–µ–Ω–∞`);
});

bot.action('cancel_change_token', async (ctx) => {
    if (!ctx.user.admin) return;
    ctx.session.changeWallet = false;
    ctx.reply(`‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—Ç–º–µ–Ω–∞`);
});

bot.hears('üéü –°–º–µ–Ω–∏—Ç—å —Ç–æ–∫–µ–Ω', async (ctx) => {
    if (!ctx.user.admin) return;
    ctx.session.changeToken = true;
    ctx.reply(`–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π —Ç–æ–∫–µ–Ω`, Markup.inlineKeyboard([
        Markup.callbackButton('‚ùå –û—Ç–º–µ–Ω–∞', 'cancel_change_token')
    ]).extra());
});

bot.hears('üé´ –°–º–µ–Ω–∏—Ç—å –∫–æ—à–µ–ª–µ–∫', async (ctx) => {
    if (!ctx.user.admin) return;
    ctx.session.changeWallet = true;
    ctx.reply(`–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –∫–æ—à–µ–ª–µ–∫`, Markup.inlineKeyboard([
        Markup.callbackButton('‚ùå –û—Ç–º–µ–Ω–∞', 'cancel_change_wallet')
    ]).extra());
});

bot.hears('‚öô –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Qiwi', async (ctx) => {
    if (!ctx.user.admin) return;
    ctx.reply(`–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é`, Markup.keyboard([
        ['üéü –°–º–µ–Ω–∏—Ç—å —Ç–æ–∫–µ–Ω'],
        ['üé´ –°–º–µ–Ω–∏—Ç—å –∫–æ—à–µ–ª–µ–∫'],
        ['üé† –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∏–≤–∏'],
        ['üîô –ù–∞–∑–∞–¥']
    ]).resize().extra()) 
});

bot.hears('üíª –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ª—é–¥–µ–π –≤ –±–æ—Ç–µ', async ctx => {
    if (!ctx.user.admin) return;
    const users = await Database.getUsers();
    ctx.reply(`–í –±–æ—Ç–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–æ ${users.length} —á–µ–ª–æ–≤–µ–∫`);
});

bot.action('cancel_add_admin', async ctx => {
    ctx.session.addAdmin = false;
    ctx.reply(`‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—Ç–º–µ–Ω–∞`);
});

bot.action('cancel_remove_admin', async ctx => {
    ctx.session.removeAdmin = false;
    ctx.reply(`‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—Ç–º–µ–Ω–∞`);
});

bot.action('add_admin', async ctx => {
    ctx.session.addAdmin = true;
    ctx.reply(`–í–≤–µ–¥–∏—Ç–µ –Ω–∏–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è`, Markup.inlineKeyboard([
        [Markup.callbackButton('‚ùå –û—Ç–º–µ–Ω–∞', 'cancel_add_admin')]
    ]).extra());
});

bot.action('remove_admin', async ctx => {
    ctx.session.removeAdmin = true;
    ctx.reply(`–í–≤–µ–¥–∏—Ç–µ –Ω–∏–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è`, Markup.inlineKeyboard([
        [Markup.callbackButton('‚ùå –û—Ç–º–µ–Ω–∞', 'cancel_remove_admin')]
    ]).extra());
});

bot.hears('üë§ –ê–¥–º–∏–Ω—ã', async ctx => {
    if (!ctx.user.admin) return;
    const users = await Database.getUsers();
    const admins = users.filter(user => user.admin == 1);
    let adm = '–ê–¥–º–∏–Ω—ã: \n\n';
    for (let i = 0; i < admins.length; i++) {
        const admin = admins[i];
        console.log(admin)
        adm += `ID: ${admin.telegram_id}\n–ù–∏–∫: @${admin.telegram_username}\n\n`
    }
    ctx.reply(adm, Markup.inlineKeyboard([
        [Markup.callbackButton('‚ûï –î–æ–±–∞–≤–∏—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞', 'add_admin')],
        [Markup.callbackButton('‚ùå –£–¥–∞–ª–∏—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞', 'remove_admin')]
    ]).extra());

});

bot.action('cancel_refill_balance', async ctx => {
    ctx.session.refillBalance = false;
    ctx.session.refillBalanceSetAmount = false;
    ctx.editMessageText(`‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—Ç–º–µ–Ω–∞`);
});

bot.hears("üí∑ –ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å", async ctx => {
    if (!ctx.user.admin) return;
    ctx.session.refillBalance = true;
    ctx.reply(`–í–≤–µ–¥–∏—Ç–µ –ª–æ–≥–∏–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞`, Markup.inlineKeyboard([
        Markup.callbackButton('‚ùå –û—Ç–º–µ–Ω–∞', 'cancel_refill_balance')
    ]).extra());
});

bot.hears("üëë –ê–¥–º–∏–Ω–∫–∞", async (ctx) => {
    if (!ctx.user.admin) return;

    ctx.reply(`–ê–¥–º–∏–Ω-—Ñ—É–Ω–∫—Ü–∏–∏`, Markup.keyboard([
        ['üí∑ –ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å'],
        ['‚ùÑ –°–º–µ–Ω–∏—Ç—å –Ω–∞—Ü–µ–Ω–∫—É'],
        ['‚öô –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Qiwi'],
        ['‚úâ –†–∞—Å—Å—ã–ª–∫–∞'],
        ['üíª –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ª—é–¥–µ–π –≤ –±–æ—Ç–µ'],
        ['üë§ –ê–¥–º–∏–Ω—ã'],
        ['üîô –ù–∞–∑–∞–¥']
    ]).resize().extra()) 
});

bot.action('cancel_tip', async ctx => {
    ctx.session.change_tip = false;
    ctx.reply(`‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—Ç–º–µ–Ω–∞`);
});

bot.hears('‚ùÑ –°–º–µ–Ω–∏—Ç—å –Ω–∞—Ü–µ–Ω–∫—É', async (ctx) => {
    if (!ctx.user.admin) return;

    ctx.session.change_tip = true;
    ctx.reply(`–ù–∞—Ü–µ–Ω–∫–∞ —Å–µ–π—á–∞—Å —Å–æ—Å—Ç–∞–≤–ª—è–µ—Ç ${config.get('service', 'tip')}. –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é —Ü–µ–Ω—É.`, Markup.inlineKeyboard([
        Markup.callbackButton('‚ùå –û—Ç–º–µ–Ω–∞', 'cancel_tip')
    ]).extra());
});

bot.hears('üé† –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∏–≤–∏', async (ctx) => {
    if (!ctx.user.admin) return;

   // const token = config.get('qiwi', 'token');
    const wally = config.get('qiwi', 'wallet');
    wallet.getOperationHistory(wally, {rows: 1, operation: "IN"}, async (err, operations) => {
        if (err) {
            ctx.reply(`–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: `+err);
            return;
        }
        ctx.reply(`–¢–æ–∫–µ–Ω –∏ –∫–æ—à–µ–ª–µ–∫ –≤ –ø–æ—Ä—è–¥–∫–µ`);
    });

});

bot.hears('‚úâ –†–∞—Å—Å—ã–ª–∫–∞', async (ctx) => {
    if (!ctx.user.admin) return;
    ctx.session.sendMessages = true;
    const keyboard = Markup.inlineKeyboard([
        [Markup.callbackButton('‚ùå –û—Ç–º–µ–Ω–∞', 'cancel')]
    ]);
    ctx.reply(`‚úâ –í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ`, Extra.markup(keyboard));
});




bot.action('cancel', async (ctx) => {
    if (!ctx.user.admin) return;
    ctx.session.sendMessages = false;
    ctx.editMessageText(`üëå –û—Ç–ø—Ä–∞–≤–∫–∞ —Ä–∞—Å—Å—ã–ª–∫–∏ –æ—Ç–º–µ–Ω–µ–Ω–∞`);
})

bot.hears('üßúüèª –ü—Ä–æ—Ñ–∏–ª—å', async (ctx) => {
    await ctx.replyWithSticker('CAACAgIAAxkBAAEHh-df8JdH2bOCOwN5oYwYsb26sJRxbgACMwADDkfHKGxLD9RFtmVqHgQ')
    ctx.reply([
        `üè¶ –í–∞—à –±–∞–ª–∞–Ω—Å: ${ctx.user.balance} RUB`,
        `üôãüèª‚Äç‚ôÇÔ∏è –í–∞—à id: ${ctx.user.telegram_id}`,
        `üõç –ö–æ–ª-–≤–æ –ø–æ–∫—É–ø–æ–∫: ${ctx.user.purchases}`
    ].join('\n'), Markup.inlineKeyboard([
        [Markup.callbackButton('üí∏ –ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å', 'refill')]
    ]).extra())
});


bot.action('refill', async (ctx) => {
    await ctx.replyWithSticker('CAACAgIAAxkBAAEHh-Vf8JbApR8CY38oAr2ej5JLhGbGtAACOAADDkfHKLFQmvkn6ZxTHgQ');
    return ctx.reply([
        '–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ QIWI:',
        '‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ',
        'üí¶ –ù–æ–º–µ—Ä - +' + config.get('qiwi', 'wallet'),
        'üí¶ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π - ' + ctx.user.telegram_id,
        '‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ',
        '–ü—Ä–æ—Å—Ç–æ –ø–æ–ø–æ–ª–Ω–∏ —ç—Ç–æ—Ç –∫–∏–≤–∏ —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º –≤—ã—à–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–º –Ω–∞ –ª—é–±—É—é —Å—É–º–º—É –∏ –¥–µ–Ω—å–≥–∏ –≤ —Ç–µ—á–µ–Ω–∏–∏ 1-2 –º–∏–Ω—É—Ç—ã –ø—Ä–∏–¥—É—Ç —Ç–µ–±–µ –Ω–∞ —Å—á–µ—Ç!',
        '‚ö† –í–∞–∂–Ω–æ! –ü—Ä–∏–Ω–∏–º–∞—é—Ç—Å—è –¢–û–õ–¨–ö–û —Ä—É–±–ª–∏.',
        '‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ'
    ].join('\n'));
});

bot.hears('üç≠ –ö—É–ø–∏—Ç—å', async (ctx) => {
    await ctx.replyWithSticker('CAACAgIAAxkBAAEHh8Vf8JKsZY0EXnWmY_irAAFXoxjfmIEAAhEAAw5Hxyh3gX6GDDp5wx4E')
    let arr = [];
    let i = 0;
    const _services = await Promise.all(await API.getPricesButtons(services));
    console.log(_services)
    _services.map(service => {
        if (i == 2)
            i = 0;
        if (i == 0)
            arr.push([]);
        const {name, id, price} = service;
        arr[arr.length - 1].push(Markup.callbackButton(`üîπ ${name} | ${String(parseInt(price)+parseInt(config.get('service', 'tip')))} ‚ÇΩ`, 'view_service ' + id));
        i++;
    })
  return ctx.reply('–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–º–µ—Ä', Markup.inlineKeyboard(arr).extra());
});

bot.action(/succ (.+)/, async(ctx) => {
    await API.completeActivation(ctx.match[ctx.match.length-1]);
    ctx.editMessageText(`üôè –°–ø–∞—Å–∏–±–æ –∑–∞ –∞–∫—Ç–∏–≤–∞—Ü–∏—é`);
});

bot.action(/wait_code (.+)/, async(ctx) => {
    try {
        const id = ctx.match[ctx.match.length-1];
        const intrvl = setInterval(async () => {
            try {
                const code = await API.getStatus(id);
                clearInterval(intrvl);
                if (code != "none")
                    ctx.editMessageText(`–í–∞—à –∫–æ–¥: ${code}`, Markup.inlineKeyboard(
                        [Markup.callbackButton('‚úÖ –ê–∫—Ç–∏–≤–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞', 'succ ' + id)]
                    ).extra());
            } catch(ex) {

            }
        }, 1000);
    } catch(ex) {
        console.error(ex);
    }    
});

bot.action(/operation_cancel (.+)/, async(ctx) => {
    await API.cancelActivation(ctx.match[ctx.match.length-1]);
    await Database.addMoney(ctx.chat.id, ctx.session.money);
    ctx.editMessageText(`‚ùå –ê–∫—Ç–∏–≤–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞`);
});

bot.action(/buy_activation (.+)/, async (ctx) => {
    try {
        console.log(ctx.match[ctx.match.length-1])
        const [service_id, country_id, price] = ctx.match[ctx.match.length-1].split('/');
        if (ctx.user.balance < price) {
            ctx.reply('‚ö† –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–µ–Ω–µ–≥ –Ω–∞ –±–∞–ª–∞–Ω—Å–µ');
            return;
        }
        ctx.session.money = price;
        const {operation_id, number} = await API.getNumber(service_id, country_id);
        ctx.editMessageText(`–í–∞—à –Ω–æ–º–µ—Ä: ${number}`, Markup.inlineKeyboard([
            [Markup.callbackButton('‚úÖ –ö–æ–¥ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω', 'wait_code ' + operation_id)],
            [Markup.callbackButton('‚ùå –û—Ç–º–µ–Ω–∏—Ç—å', 'operation_cancel ' + operation_id)]
        ]).extra());
        Database.incrementPurchases(ctx.chat.id);
        Database.addMoney(ctx.chat.id, price * -1);
    } catch(ex) {
        console.error(ex);
        ctx.reply(`‚ö† ${ex}`);
    }    
});

bot.action(/view_service (.+)/, async (ctx) => {
    let arr = [];
    const _countries = await Promise.all(await API.getCountriesButtons(ctx.match[ctx.match.length-1], countries));
    _countries.map((country, i) => {
        arr.push(
            [Markup.callbackButton(
                `${country.flag} ${country.name} | ${String(parseInt(country.price)+parseInt(config.get('service', 'tip')))} ‚ÇΩ | ${country.count}`, 'buy_activation ' + ctx.match[ctx.match.length-1] + '/' + country.id + '/' + String(parseInt(country.price)+parseInt(config.get('service', 'tip')))
           )]
        )
    })

    return ctx.reply(`–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç—Ä–∞–Ω—É`, Markup.inlineKeyboard(arr).extra());
})

bot.use(async(ctx, next) => {
    if (!ctx.user.admin) {
        return next();
    }
    if (ctx.session.sendMessages) {
        const users = await Database.getUsers();
        users.map(async(user) => {
            if (typeof ctx.message.photo === 'undefined') {
                ctx.telegram.sendMessage(user.telegram_id, ctx.message.text).catch(err => console.error(err));
            } else {
                ctx.telegram.sendPhoto(user.telegram_id, ctx.message.photo[ctx.message.photo.length-1]['file_id'], {
                    caption: ctx.message.caption
                }).catch(err => console.error(err));
            }
        });
        ctx.session.sendMessages = false;
        ctx.reply(`‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.`);
    } else if (ctx.session.changeWallet) {
        config.set('qiwi', 'wallet', ctx.message.text.replace("+", ""));
        ctx.reply(`‚úÖ –ù–æ–º–µ—Ä –∫–æ—à–µ–ª—å–∫–∞ –∏–∑–º–µ–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ`);
        ctx.session.changeWallet = false;
    } else if (ctx.session.changeToken) {
        config.set('qiwi', 'token', ctx.message.text);
        wallet.changeToken(ctx.message.text);
        ctx.reply(`‚úÖ –¢–æ–∫–µ–Ω –∏–∑–º–µ–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ`);
        ctx.session.changeToken = false;
    } else if (ctx.session.change_tip) {
        config.set('service', 'tip', ctx.message.text);
        ctx.reply(`‚úÖ –ù–∞—Ü–µ–Ω–∫–∞ –∏–∑–º–µ–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ`);
        ctx.session.change_tip = false;
    } else if (ctx.session.removeAdmin) {
        ctx.session.removeAdmin = false;
        await Database.removeAdmin(ctx.message.text.replace(/@/g, ""));
        ctx.reply(`‚úÖ –ê–¥–º–∏–Ω–∫–∞ —É–¥–∞–ª–µ–Ω–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è @${ctx.message.text.replace(/@/g, "")}`)
    } else if (ctx.session.addAdmin) {
        ctx.session.addAdmin = false;
        await Database.addAdmin(ctx.message.text.replace(/@/g, ""));
        ctx.reply(`‚úÖ –ê–¥–º–∏–Ω–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è @${ctx.message.text.replace(/@/g, "")}`)
    } else if (ctx.session.refillBalance) {
        ctx.session.refillBalance = false;
        ctx.session.refillBalanceSetAmount = true;
        ctx.session.username = ctx.message.text.replace(/@/g, "");
        await ctx.reply(`–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –¥–ª—è –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è`, Markup.inlineKeyboard([
            Markup.callbackButton('‚ùå –û—Ç–º–µ–Ω–∞', 'cancel_refill_balance')
        ]).extra());
    } else if (ctx.session.refillBalanceSetAmount && !isNaN(ctx.message.text)) {
        ctx.session.refillBalanceSetAmount = false;
        const user = await Database.findUser(ctx.session.username, false);
        await Database.addMoney(user.telegram_id, parseInt(ctx.message.text));
        await ctx.reply(`‚úÖ –ù–∞—á–∏—Å–ª–µ–Ω–æ ${ctx.message.text} —Ä—É–±–ª–µ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é @${ctx.session.username}`);
    }

    next();
});

bot.launch();
refill(wallet);